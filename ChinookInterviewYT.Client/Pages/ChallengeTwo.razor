@page "/challengetwo"
@using ChinookInterviewYT.Client.Models.DTOs
@using ChinookInterviewYT.Client.Models.Wrappers
@rendermode InteractiveWebAssembly
@inject HttpClient Http
@inject NavigationManager Nav

<div class="container-xxl my-3">

    <h3 class="ctaTitle">Challenge Two: Display Artists, Albums, and Tracks</h3>
    <p class="ctaSubTitle border-bottom mb-5">
        Write a query that retrieves all artists, their albums, and the corresponding tracks. 
        The output is ordered by the artist’s name, album title, and track title. 
    </p>
   
   
    @if (!isLoading)
    {
        
        
        <div class="artist-list">
            @foreach (var artist in pagedArtistDTO?.Artists ?? new List<ArtistDTO>())
            {
                <div> 
               <div class="fw-bold fs-3 my-2">@artist.ArtistName</div>
                   @foreach (var album in artist.Albums)
                   {
                            //hstack = horizontal stack makes it a flexbox
                          <div class="hstack gap-3 align-items-start mb-3">
                                <div>
                                    <img class="coverArt" src="/images/AlbumPlaceHolder.png"/>
                                </div>
                                <div class="flex-grow-1">
                                    <div class="fw-bold fs-5">@album.AlbumTitle
                                    <span class="lead">
                                            (Total Duration: @TimeSpan.FromMilliseconds(album.TotalAlbumDuration).ToString("hh\\:mm\\:ss"))
                                    </span>
                                    </div>
                                    <div class="lead">Track List</div>
                                    <ol>
                                        @foreach (var track in album.Tracks)
                                        {
                                           <li class="trackList">
                                               @track.TrackTitle
                                           </li> 
                                        }
                                    </ol>

                                </div> 
                          </div>  
                   }

                </div>
            }
        </div>
        <!-- Pagination Component -->
        <PaginationComponent PageNumber="pagedArtistDTO!.PageNumber"
                             TotalPages="pagedArtistDTO.TotalPages"
                             OnNext="NextPage"
                             OnPrevious="PreviousPage" />
    }
    
    else
    {
      <p>Loading ...</p>
    }
</div>

@code {
    [SupplyParameterFromQuery]
    public int PageNumber { get; set; } = 1;

    [SupplyParameterFromQuery]
    public int PageSize { get; set; } = 10;

    private ArtistsResponse? artistsResponse;
    private PagedArtistDTO? pagedArtistDTO => artistsResponse?.Value;
    private bool isLoading = true;

    protected override async Task OnParametersSetAsync()
    {
        isLoading = true;

        try
        {
            artistsResponse = await Http.GetFromJsonAsync<ArtistsResponse>($"api/Artists/AlbumsandTracksPaged?pageNumber={PageNumber}&pageSize={PageSize}")
            ?? throw new HttpIOException(HttpRequestError.InvalidResponse);
        }
        catch (Exception)
        {

            artistsResponse = new ArtistsResponse
                {
                    Value = new PagedArtistDTO
                    {
                        Artists = new List<ArtistDTO>(),
                        PageNumber = 1,
                        PageSize = 5,
                        TotalCount = 0
                    },
                    Result = "Error"
                };
        }
        isLoading = false;


    }
    // //  Pagination properties
    // private bool CanGoNext => pagedArtistDTO?.PageNumber < pagedArtistDTO?.TotalPages;
    // private bool CanGoPrevious => pagedArtistDTO?.PageNumber > 1;

    // private void NextPage()
    // {
    //     PageNumber = pagedArtistDTO?.PageNumber + 1 ?? PageNumber;
    //     GetPage(PageNumber);
    // }

    // private void PreviousPage()
    // {
        
    //     PageNumber = pagedArtistDTO?.PageNumber - 1 ?? PageNumber;
    //     GetPage(PageNumber);
    // }
    // private void GetPage(int pageNumber)
    // {
    //     Dictionary<string, object?> query = new()
    //     {
    //         {"pageNumber", pageNumber},
    //         {"pageSize", pagedArtistDTO?.PageSize ?? PageSize},
    //     };
    //     string url = Nav.GetUriWithQueryParameters(query);
    //     Nav.NavigateTo(url);
    // }
    //  Pagination properties
    private bool CanGoNext => pagedArtistDTO!.PageNumber < pagedArtistDTO.TotalPages;
    private bool CanGoPrevious => pagedArtistDTO!.PageNumber > 1;

    private async Task NextPage()
    {
        if (CanGoNext)
        {
            await OnParametersSetAsync();
        }
    }

    private async Task PreviousPage()
    {
        if (CanGoPrevious)
        {
            await OnParametersSetAsync();
        }
    }
}
