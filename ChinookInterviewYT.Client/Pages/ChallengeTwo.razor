@page "/challengetwo"
@using ChinookInterviewYT.Client.Models.DTOs
@using ChinookInterviewYT.Client.Models.Wrappers
@rendermode InteractiveWebAssembly
@inject HttpClient Http
@inject NavigationManager Nav

<div class="container-xxl my-3">

    <h3 class="ctaTitle">Challenge Two: Display Artists, Albums, and Tracks</h3>
    <p class="ctaSubTitle border-bottom mb-5">
        Write a query that retrieves all artists, their albums, and the corresponding tracks. 
        The output is ordered by the artist’s name, album title, and track title. 
    </p>
   
   
    @if (!isLoading)
    {
        <div class="pagination b-stack gap-2 justify-content-end">
            <button class="btn btn-primary" @onclick="PreviousPage" disabled="@(!CanGoPrevious)">Previous</button>
            <span class="mx-2">Page @pagedArtistDTO?.PageNumber of @pagedArtistDTO?.TotalPages</span>
            <button class="btn btn-primary" @onclick="NextPage" disabled="@(!CanGoNext)">Next</button>
        </div>
        <div>
            @foreach (var artist in pagedArtistDTO?.Artists ?? new List<ArtistDTO>())
            {
                <div class="my-3 border"> 
               <div>@artist.ArtistName</div>
                </div>
            }
        </div>    
    }
    
    else
    {
      <p>Loading ...</p>
    }
</div>

@code {
    [SupplyParameterFromQuery]
    public int PageNumber { get; set; } = 1;

    [SupplyParameterFromQuery]
    public int PageSize { get; set; } = 10;

    private ArtistsResponse? artistsResponse;
    private PagedArtistDTO? pagedArtistDTO => artistsResponse?.Value;
    private bool isLoading = true;

    protected override async Task OnParametersSetAsync()
    {
        isLoading = true;

        try
        {
            artistsResponse = await Http.GetFromJsonAsync<ArtistsResponse>($"api/Artists/AlbumsandTracksPaged?pageNumber={PageNumber}&pageSize={PageSize}")
            ?? throw new HttpIOException(HttpRequestError.InvalidResponse);
        }
        catch (Exception)
        {

            artistsResponse = new ArtistsResponse
                {
                    Value = new PagedArtistDTO
                    {
                        Artists = new List<ArtistDTO>(),
                        PageNumber = 1,
                        PageSize = 5,
                        TotalCount = 0
                    },
                    Result = "Error"
                };
        }
        isLoading = false;


    }
    //  Pagination properties
    private bool CanGoNext => pagedArtistDTO?.PageNumber < pagedArtistDTO?.TotalPages;
    private bool CanGoPrevious => pagedArtistDTO?.PageNumber > 1;

    private void NextPage()
    {
        // if (!isSearchActive && CanGoNext)
        // {
        //     await LoadCustomersAsync(pagedArtistDTO.PageNumber + 1);
        // }
        PageNumber = pagedArtistDTO?.PageNumber + 1 ?? PageNumber;
        GetPage(PageNumber);
    }

    private void PreviousPage()
    {
        // if (!isSearchActive && CanGoPrevious)
        // {
        //     await LoadCustomersAsync(pagedArtistDTO.PageNumber - 1);
        // }
        PageNumber = pagedArtistDTO?.PageNumber - 1 ?? PageNumber;
        GetPage(PageNumber);
    }
    private void GetPage(int pageNumber)
    {
        Dictionary<string, object?> query = new()
        {
            {"pageNumber", pageNumber},
            {"pageSize", pagedArtistDTO?.PageSize ?? PageSize},
        };
        string url = Nav.GetUriWithQueryParameters(query);
        Nav.NavigateTo(url);
    }
}
