@page "/challengethree"
@using ChinookInterviewYT.Client.Components
@rendermode InteractiveWebAssembly
@inject HttpClient Http
@inject NavigationManager Nav

<title>Challenge Three</title>

<div class="container-xxl my-3">

    <h3 class="ctaTitle">Challenge Three: Display Invoices and Invoice Items</h3>
    <p class="ctaSubTitle">Retrieve all invoices, the customer’s first and last name, and the invoice total.<br />
        The output is ordered by the customer’s last name and first name</p>

    @if (!IsLoading)
    {
        <div class="d-flex justify-content-start mb-2">
            <div class="row">
                <div class="col-12">
                    <InputSelect id="customerSelect" class="form-select" @bind-Value="CustomerId" @bind-Value:after ="OnCustomerSelected">
                        <option value="0">All</option>
                        @foreach (var customer in customerList)
                        {
                            <option value="@customer.CustomerId">@customer.FullName</option>
                        }
                    </InputSelect>
                </div>
            </div>
        </div>

        @if (pagedCustomers.Customers != null && pagedCustomers.Customers.Any())
        {
            @foreach (var customer in pagedCustomers.Customers)
            {

                <div class="border border-1 p-2 mb-5">
                    <div class="h2">@customer.FullName</div>
                    @foreach (var invoice in customer.Invoices!)
                    {
                        <div class="table-responsive ms-4 mb-4">
                            <table class="table table-primary table-striped shadow">
                                <thead class="table-dark">
                                    <tr>
                                        <th class="colspan-1 rounded-top">
                                            Invoice Date: @invoice.InvoiceDate.ToShortDateString()
                                        </th>
                                    </tr>
                                    <tr>
                                        <th>Track Name</th>
                                        <th>Price</th>
                                        <th>Qty</th>
                                        <th>Sub Total</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var lineItem in invoice.LineItems)
                                    {
                                        <tr>
                                            <td>@lineItem.TrackTitle</td>
                                            <td>@lineItem.UnitPrice</td>
                                            <td>@lineItem.Quantity</td>
                                            <td>@lineItem.SubTotal</td>
                                        </tr>
                                    }
                                    <tr>
                                        <td colspan="3"class="text-end fw-bold">Invoice Total:</td>
                                        <td>@invoice.InvoiceTotal</td>
                                    </tr>
                                </tbody>

                            </table>
                        </div>
                    }
                </div>
            }
        }
        else
        {
            <p>No invoices found.</p>
        }

        <!-- Pagination Component -->
        <PaginationComponent PageNumber="pagedCustomers?.PageNumber ?? 1"
        TotalPages="pagedCustomers?.TotalPages ?? 1"
        OnNext="NextPage"
        OnPrevious="PreviousPage" />
    }
    else
    {
        <p>Loading Invoices . . .</p>
    }

</div>


@code {
    [SupplyParameterFromQuery]
    private int PageNumber { get; set; } = 1;

    [SupplyParameterFromQuery]
    private int PageSize { get; set; } = 10;

    [SupplyParameterFromQuery]
    private int CustomerId { get; set; } = 0;

    //generates List of Invoices
    private PagedCustomerInvoiceDTO pagedCustomers = new();
    //generates data for the dropdowns
    private List<CustomerDTO> customerList = new();

    private bool IsLoading = true;

    //  Pagination properties
    private bool CanGoNext => pagedCustomers.PageNumber < pagedCustomers.TotalPages;
    private bool CanGoPrevious => pagedCustomers.PageNumber > 1;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            customerList = await Http.GetFromJsonAsync<List<CustomerDTO>>("api/Customers/GetAllCustomersDTO") ?? new List<CustomerDTO>();
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        IsLoading = true;
        try
        {
            pagedCustomers = await Http.GetFromJsonAsync<PagedCustomerInvoiceDTO>($"api/Customers/GetInvoicesWithLineItems?PageNumber={PageNumber}&PageSize={PageSize}&CustomerId={CustomerId}")
            ?? throw new HttpIOException(HttpRequestError.InvalidResponse);
        }
        catch 
        {
            pagedCustomers = new();
        }
        IsLoading = false;
    }

    private async Task NextPage()
    {
        if (CanGoNext)
        {
            PageNumber++;
            await OnParametersSetAsync();
        }
    }

    private async Task PreviousPage()
    {
        if (CanGoPrevious)
        {
            PageNumber--;
            await OnParametersSetAsync();
        }
    }

    private void OnCustomerSelected()
    {
        PageNumber = 1;
        GetPage(PageNumber);
    }

    private void GetPage(int pageNumber)
    {
        Dictionary<string, object?> query = new()
        {
            {"pageNumber", pageNumber},
            {"pageSize", PageSize},
            {"CustomerId", CustomerId}
        };
        string url = Nav.GetUriWithQueryParameters(query);
        Nav.NavigateTo(url);
    }
    
}
